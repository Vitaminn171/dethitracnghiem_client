/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import BLL.Controller;
import BLL.SendMail;

import com.formdev.flatlaf.FlatLightLaf;
import com.google.gson.Gson;
import com.google.gson.JsonParser;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import org.json.JSONObject;

/**
 *
 * @author Quoc An
 */
public class OTP extends javax.swing.JFrame {

    /**
     * Creates new form OTP
     */
    double timeLeft = 5000; //5 seconds
    int timeLeft2 = 5;
    Timer timer;
    boolean flag;

    public OTP(JSONObject json) {
        initComponents();

        this.setTitle("Quiz Exam OTP");
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width / 2 - this.getSize().width / 2, dim.height / 2 - this.getSize().height / 2);

        jFormattedTextField1.putClientProperty("JComponent.roundRect", true);
        jFormattedTextField1.putClientProperty("JTextField.placeholderText", "OTP");
        jButton_submit.putClientProperty("JButton.buttonType", "roundRect");

        //double timeLeft = 5000; //5 seconds
//
//        ActionListener countDown=new ActionListener()
//        {
//            public void actionPerformed(ActionEvent e)
//            {
//                timeLeft -= 100;
//                SimpleDateFormat df=new SimpleDateFormat("mm:ss:S");
//                jLabel1.setText(df.format(timeLeft));
//                if(timeLeft<=0)
//                {
//                    timer.stop();
//                }
//            }
//        };
//        timer=new Timer(100, countDown);
        
        Controller controller = new Controller();
        String otp = controller.generateOTP();
        SendMail.SendOTP(otp);
        
        jButton_submit.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
             try {
                     checkOtpValid(jFormattedTextField1.getText(), json, otp);
             } catch (Exception ex) {
                 Logger.getLogger(OTP.class.getName()).log(Level.SEVERE, null, ex);
             }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        jFormattedTextField1 = new javax.swing.JFormattedTextField();
        jButton_submit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("OTP Verification");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.insets = new java.awt.Insets(30, 60, 0, 60);
        getContentPane().add(jLabel1, gridBagConstraints);

        jFormattedTextField1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jFormattedTextField1.setMaximumSize(new java.awt.Dimension(120, 40));
        jFormattedTextField1.setMinimumSize(new java.awt.Dimension(120, 40));
        jFormattedTextField1.setPreferredSize(new java.awt.Dimension(250, 40));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(15, 60, 0, 60);
        getContentPane().add(jFormattedTextField1, gridBagConstraints);

        jButton_submit.setBackground(new java.awt.Color(104, 185, 132));
        jButton_submit.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButton_submit.setForeground(new java.awt.Color(255, 255, 255));
        jButton_submit.setText("Submit");
        jButton_submit.setBorderPainted(false);
        jButton_submit.setMaximumSize(new java.awt.Dimension(100, 40));
        jButton_submit.setMinimumSize(new java.awt.Dimension(100, 40));
        jButton_submit.setPreferredSize(new java.awt.Dimension(100, 40));
        jButton_submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_submitActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 8;
        gridBagConstraints.insets = new java.awt.Insets(15, 60, 30, 60);
        getContentPane().add(jButton_submit, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_submitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_submitActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_jButton_submitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        FlatLightLaf.setup();

    }

    public void checkOtpValid(String otpData, JSONObject json, String correctOtp) throws Exception {
        System.out.println(String.valueOf(json));
        if (!Controller.validateOTP(otpData)) {
            JOptionPane.showMessageDialog(this, "OTP invalid type! Need to be 6 digits");
        } else {
            try {
                otpVerify(otpData, json, correctOtp);
            } catch (IOException ex) {
                Logger.getLogger(OTP.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    public void otpVerify(String otpData, JSONObject json, String correctOtp) throws IOException, Exception {
        Controller controller = new Controller();
//        Map<String, String> inputMap = new HashMap<String, String>();
//        inputMap.put("func", "otp");
//        inputMap.put("correctOtp", correctOtp);
//        inputMap.put("otpData", otpData);
//        inputMap.put("status", "true");
        
        JSONObject jsonSend = new JSONObject();
        jsonSend.put("func", "otp");
        jsonSend.put("func_1", json.getString("func"));
        jsonSend.put("otpData", otpData);
        jsonSend.put("status", true);
        jsonSend.put("username", json.getString("username"));
    
//        JSONObject json = new JSONObject(data);
        String receiveData = controller.SendReceiveData(jsonSend.toString());
        JSONObject jsonDataOtpReceive = new JSONObject(receiveData);//string convert into json object
        String receive;
        if(jsonDataOtpReceive.getBoolean("status")){
            switch (json.getString("func")) {
                case "signup": {
                    Signup signup = new Signup();
                    signup.Signup(json.toString(), controller);
                    break;
                }
                case "changePass":{
                    ChangePassword changePass = new ChangePassword(json.getString("username"));
                    changePass.changePass(String.valueOf(json), controller);
                    break;
                }
            }
            this.dispose();
        } else {

            JOptionPane.showMessageDialog(this, "Wrong OTP!");
            switch (json.getString("func")) {
                case "signup":
                    Login login = new Login();
                    login.setVisible(true);
                    break;
                case "changePass":
                    Dashboard dashboard = new Dashboard(json.getString("username"));
                    dashboard.setVisible(true);
                    break;
            }
        }  
  
    }

    public boolean check() {
        return flag;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_submit;
    private javax.swing.JFormattedTextField jFormattedTextField1;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
